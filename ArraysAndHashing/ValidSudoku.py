def setIsValid(set) -> bool:
    table = [0] * 9
    for i in set:
        if i != ".":
            if table[int(i) - 1] > 0:
                return False
            else:
                table[int(i) - 1] += 1
    return True


class Solution:
    def isValidSudoku(self, board: list[list[str]]) -> bool:
        for i in range(9):
            set = []
            if not setIsValid(board[i]):
                return False
            column = [board[j][i] for j in range(9)]
            if not setIsValid(column):
                return False
        for k in range(3):
            for l in range(3):
                carre = []
                for i in range(k*3,3*(k+1)):
                    for j in range(l*3,3*(l+1)):
                        carre.append(c[i][j])
                if not setIsValid(carre):
                    return False
        return True


board = [
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"],
]

b = [
    [".", ".", "4", ".", ".", ".", "6", "3", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    ["5", ".", ".", ".", ".", ".", ".", "9", "."],
    [".", ".", ".", "5", "6", ".", ".", ".", "."],
    ["4", ".", "3", ".", ".", ".", ".", ".", "1"],
    [".", ".", ".", "7", ".", ".", ".", ".", "."],
    [".", ".", ".", "5", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
]

c = [
    [".", ".", ".", ".", "5", ".", ".", "1", "."],
    [".", "4", ".", "3", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", "3", ".", ".", "1"],
    ["8", ".", ".", ".", ".", ".", ".", "2", "."],
    [".", ".", "2", ".", "7", ".", ".", ".", "."],
    [".", "1", "5", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", "2", ".", ".", "."],
    [".", "2", ".", "9", ".", ".", ".", ".", "."],
    [".", ".", "4", ".", ".", ".", ".", ".", "."],
]
# k = 0
# l = 1
# carre = []
# for i in range(k*3,3*(k+1)):
#     for j in range(l*3,3*(l+1)):
#         carre.append(c[i][j])
# print(carre)
print(Solution().isValidSudoku(board=c))
